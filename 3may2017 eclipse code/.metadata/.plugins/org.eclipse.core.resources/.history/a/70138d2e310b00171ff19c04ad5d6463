package com.dgca.discovery;

import java.util.Properties;

import javax.transaction.*;

import com.adventnet.management.transaction.TransactionAPI;
import com.adventnet.management.transaction.UserTransactionException;
import com.adventnet.nms.store.NmsStorageException;
import com.adventnet.nms.topodb.FoundFilter;
import com.adventnet.nms.topodb.ManagedObject;
import com.adventnet.nms.topodb.SnmpNode;
import com.adventnet.nms.topodb.TopoAPI;
import com.adventnet.nms.topodb.TopoObject;
import com.adventnet.nms.util.NmsLogMgr;
import com.adventnet.nms.util.NmsUtil;
import com.adventnet.snmp.beans.SnmpTarget;
import com.adventnet.snmp.snmp2.SnmpOID;
import com.dgca.ups.UPSDevice;

/**
 * This class has sample code that demonstrates the following: 1. The skeleton
 * code to represent the structure of a simple discovery filter. 2. It contains
 * WebNMS transaction methods to demonstrate how transaction can be used while
 * adding/updating objects in the database. 3. It also contains code sample to
 * send SNMP queries to the device, this can be used as a guideline for
 * interacting with the device to retrieve its properties. 4. In addition it
 * outlines a basic business logic of how a discovered object is handled inside
 * the Discovery Filter before being added to the WebNMS database.
 * 
 * As this class is just a sample, the code implementation provided for the
 * filterObject(ManagedObject, TopoAPI) method can be changed as per user
 * requirement.
 * 
 * Please Note that the DiscoveryFilter has to implement the FounfFilter
 * interface and hence it is mandatory to implement the filterObject method.
 */

public class MyDiscoveryFilter implements FoundFilter {
	private TransactionAPI transactionAPI = null;

	@SuppressWarnings("unused")
	public ManagedObject filterObject(ManagedObject mo, TopoAPI topoApi)
			throws NmsStorageException, UserTransactionException {
		System.out.println("Filter class called" + mo.getDisplayName());

		// TODO First Step: Check if the ManagedObject satisfies
		// the criteria that you want to process
		if (mo == null)
			return null;

		if (!(mo instanceof SnmpNode)) {
			// As our requirement is to handle only SnmpNodes let us return the
			// MO as is if it is not an instance of SnmpNode.
			// Please note returning the MOs that you aren't interested in
			// handling is very important
			// as these MOs will be passed on to other discovery filters
			// configured in the discovery.filters conf file.
			return mo;
		} /*else // if (((SnmpNode) mo).getDisplayName().indexOf("10.192.0.11") != -1) {
			// TODO Second step: Here you can create an instance of your modeled
			// object
			// Please make sure that the below line is replaced by your extended
			// managed object.
			System.err.println("I am in if condition of UPS===="+mo.getDisplayName());
			UPSDevice upsDevice = new UPSDevice();
upsDevice.setProperties(mo.getProperties());
upsDevice.setName(mo.getName()+"_1");;
			// TODO Third Step: Set the properties of the new object

			//mo.setName(mo.getName()); // This is a sample where the
												// property is extracted from
												// the incoming MO
			mo.setClassname("com.dgca.ups.UPSDevice"); // This is a
																// sample when a
															// string/hard-coded
																// value is
																// assigned to
																// the new
																// object
			upsDevice.setType("UPS");
			upsDevice.setStatusPollEnabled(true);
			upsDevice.setTester("usertest");
upsDevice.setPollInterval(10);
 //upsDevice.setUClass("test.UserTester");
upsDevice.setUClass("com.dgca.test.URLPing");

			System.err.println("After setting usertester and poll interval");
			
			//upsDevice.setIpAddress(((SnmpNode) mo).getDisplayName());
			Properties props = mo.getProperties(); // Getting the properties of
													// MO
		     props.put("type", "UPS");
		     props.put("location", "kuwait");// adding any additional user properties.
			//upsDevice.setProperties(props);

			// TODO Fourth Step: Query the device for any additional properties
			// Below code shows sample for querying an SNMP Device.

			SnmpTarget target = new SnmpTarget();
			target.setTargetHost(mo.getName()); // setting the hostname of the
												// device to query
			target.setTargetPort(((SnmpNode) mo).getSnmpport()); // setting the
																	// snmpport
																	// to which
																	// queries
																	// will be
																	// sent
			target.setCommunity(((TopoObject) mo).getCommunity()); // setting
																	// the
																	// community

			// code snippet for querying the device

			SnmpOID oid1 = new SnmpOID("oid of required property from the mib");
			target.setSnmpOID(oid1);
			String errorMsg = null;
			String result = target.snmpGet();
			if (result == null || result.equalsIgnoreCase("null")) // This means
																	// error
																	// occurred
																	// in
																	// retrieving
																	// the
																	// property
																	// from the
																	// device
				errorMsg = target.getErrorString(); // print or log this error
													// message as required.
			else {
				// If we get here, the query was successful in retrieving the
				// property from the device
				// so we need to set it to the switchObj.
				// upsDevice.setTestProperty(result); //say the name of the
				// property is TestProperty.
			}

			// TODO Fifth Step: Return the custom object instance so it can be
			// added to the database by WebNMS framework
			// or do the process of adding the MO yourself using TopoAPI
			// say we choose to add the MO to DB here inside the filter itself,
			// then we need to do it in transaction.
			if (transactionAPI == null) {
				initTransactionAPI();
			}
			beginTransaction();

			try {
				boolean checkMO = topoApi.isManagedObjectPresent(upsDevice.getName());
				System.err.println("result of checkMo: ===="+checkMO);

				if (!checkMO) // This implies an object with this name is not
								// already present in DB hence we can add this
								// object
				{
					System.err.println("upsDevice properties: ===="+upsDevice.getProperties());
					//String result2 = topoApi.addNode(upsDevice,false,false,false);
					
					boolean result2 = topoApi.addObject(upsDevice);
					System.err.println("upsDevice added. result is  "+result2);
					// NOTE: as we have added the object to database we must
					// return null
				} else {
					// TODO log an error saying object with same name already
					// exists.
				}
				commitTransaction();
				System.err.println("After commitTransaction: ====");
			} catch (java.rmi.RemoteException re) {
				// NmsLogMgr is the default logging framework for WebNMS, its
				// use here is optional.
				// You can use some other logging framework instead.
				NmsLogMgr.TOPOERR.fail(
						" RemoteException while adding/updating the object ",
						re);
				rollbackTransaction(re);
			} catch (com.adventnet.nms.store.NmsStorageException nse) {
				NmsLogMgr.TOPOERR
						.fail(" NmsStorageException while adding/updating the object ",
								nse);
				rollbackTransaction(nse);
			} catch (com.adventnet.management.transaction.UserTransactionException ute) {
				NmsLogMgr.TOPOERR
						.fail(" UserTransactionException while adding/updating the object  ",
								ute);
				rollbackTransaction(ute);
			} catch (Exception e) {
				e.printStackTrace();
				NmsLogMgr.TOPOERR.fail(
						" Exception while adding/updating the object  ", e);
				rollbackTransaction(e);
			}
		//}
*/		
		//else if (((SnmpNode) mo).getDisplayName().indexOf("10.192.0.11") != -1) {
			else if (((SnmpNode) mo).getType().equals("snmp-node")){
			// TODO Second step: Here you can create an instance of your modeled
			// object
			// Please make sure that the below line is replaced by your extended
			// managed object.
			System.err.println("I am in if condition of UPS ===="+mo.getDisplayName());
			
			UPSDevice upsDevice = new UPSDevice();
			SnmpTarget target = new SnmpTarget();
			target.setTargetHost(mo.getName()); // setting the hostname of the
												// device to query
			target.setTargetPort(((SnmpNode) mo).getSnmpport()); // setting the
																	// snmpport
																	// to which
																	// queries
																	// will be
																	// sent
			target.setCommunity(((TopoObject) mo).getCommunity()); // setting
																	// the
																	// community

			// code snippet for querying the device

			SnmpOID oid1 = new SnmpOID(".1.3.6.1.2.1.1.5.0");
			target.setSnmpOID(oid1);
			String errorMsg = null;
			String result = target.snmpGet();
			if (result == null || result.equalsIgnoreCase("null")) // This means
																	// error
																	// occurred
																	// in
																	// retrieving
																	// the
																	// property
																	// from the
																	// device
				errorMsg = target.getErrorString(); // print or log this error
													// message as required.
			else {
				
				upsDevice.setDisplayName(result+"_UPS");

				System.out.println("result of snmp query "+result);
				
				// If we get here, the query was successful in retrieving the
				// property from the device
				// so we need to set it to the switchObj.
				// upsDevice.setTestProperty(result); //say the name of the
				// property is TestProperty.
			}

			upsDevice.setProperties(mo.getProperties());
			upsDevice.setName(mo.getName());

			
			//mo.setClassname("com.dgca.ups.UPSDeviceBean"); 
			upsDevice.setType("UPS");
			upsDevice.setStatusPollEnabled(true);
			upsDevice.setTester("usertest");
			upsDevice.setPollInterval(10);
            upsDevice.setUClass("com.dgca.test.URLPing");
			upsDevice.setLocation("kuwait");


			System.err.println("After setting usertester and poll interval");
			
			Properties props = mo.getProperties(); 
			
			// TODO Fourth Step: Query the device for any additional properties
			// Below code shows sample for querying an SNMP Device.

		

			// TODO Fifth Step: Return the custom object instance so it can be
			// added to the database by WebNMS framework
			// or do the process of adding the MO yourself using TopoAPI
			// say we choose to add the MO to DB here inside the filter itself,
			// then we need to do it in transaction.
			if (transactionAPI == null) {
				initTransactionAPI();
			}
			beginTransaction();

			try {
				boolean checkMO = topoApi.isManagedObjectPresent(upsDevice.getName());
				System.err.println("result of checkMo: ===="+checkMO);

				if (!checkMO) // This implies an object with this name is not
								// already present in DB hence we can add this
								// object
				{
					System.err.println("upsDevice properties: ===="+upsDevice.getProperties());
					//String result2 = topoApi.addNode(upsDevice,false,false,false);
					
					boolean result2 = topoApi.addObject(upsDevice);
					System.err.println("upsDevice added. result is  "+result2);
					// NOTE: as we have added the object to database we must
					// return null
				} else {
					// TODO log an error saying object with same name already
					// exists.
				}
				commitTransaction();
				System.err.println("After commitTransaction: ====");
			}catch (java.rmi.RemoteException re) {
				// NmsLogMgr is the default logging framework for WebNMS, its
				// use here is optional.
				// You can use some other logging framework instead.
				NmsLogMgr.TOPOERR.fail(
						" RemoteException while adding/updating the object ",
						re);
				rollbackTransaction(re);
			} catch (com.adventnet.nms.store.NmsStorageException nse) {
				NmsLogMgr.TOPOERR
						.fail(" NmsStorageException while adding/updating the object ",
								nse);
				rollbackTransaction(nse);
			} catch (com.adventnet.management.transaction.UserTransactionException ute) {
				NmsLogMgr.TOPOERR
						.fail(" UserTransactionException while adding/updating the object  ",
								ute);
				rollbackTransaction(ute);
			} catch (Exception e) {
				e.printStackTrace();
				NmsLogMgr.TOPOERR.fail(
						" Exception while adding/updating the object  ", e);
				rollbackTransaction(e);
			}
		}
		
		
		return mo;
	}

	private void initTransactionAPI() {
		try {
			transactionAPI = NmsUtil.relapi.getTransactionAPI();
		} catch (Exception ex) {
			NmsLogMgr.TOPOERR.fail(
					"Exception in getting the handle of TransactionAPI ", ex);
		}
	}

	private void beginTransaction() {
		try {
			transactionAPI.begin();
		} catch (javax.transaction.NotSupportedException nse) {
		} catch (Exception ex) {
			NmsLogMgr.TOPOERR.fail("Exception in beginning the transaction ",
					ex);
		}
	}

	private void commitTransaction() {
		try {
			transactionAPI.commit();
		} catch (Exception ex) {
			NmsLogMgr.TOPOERR.fail("Exception in committing the transaction ",
					ex);
		}
	}

	private void rollbackTransaction(Exception exception) {
		try {
			transactionAPI.rollback(exception.getMessage());
		} catch (Exception ex) {
			NmsLogMgr.TOPOERR.fail(
					"Exception in rolling back the transaction ", ex);
		}
	}

}
