<?xml version="1.0" encoding="ISO-8859-1" ?>

<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">

<form-validation>
<!-- $Id: perf-validator-rules.xml,v 1.2 2010/10/29 13:47:12 swaminathap Exp $ -->
   <global>

      <validator name="required"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateRequired"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
                  msg="webclient.topo.errors.required">

         <javascript><![CDATA[
            function validateRequired(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new required();
                for (x in oRequired) {
                	var field = form[oRequired[x][0]];
                	
                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'file' ||
                        field.type == 'select-one' ||
                        field.type == 'radio' ||
                        field.type == 'password') {
                        
                        var value = '';
						// get field's value
						if (field.type == "select-one") {
							var si = field.selectedIndex;
							if (si >= 0) {
								value = field.options[si].value;
							}
						} else {
							value = field.value;
						}
                        
                        if (trim(value).length == 0) {
                        
	                        if (i == 0) {
	                            focusField = field;
	                        }
	                        fields[i++] = oRequired[x][1];
	                        isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
         </javascript>

      </validator>


      <validator name="requiredif"
                 classname="org.apache.struts.validator.FieldChecks"
                 method="validateRequiredIf"
                 methodParams="java.lang.Object,
                               org.apache.commons.validator.ValidatorAction,
                               org.apache.commons.validator.Field,
                               org.apache.struts.action.ActionErrors,
                               org.apache.commons.validator.Validator,
                               javax.servlet.http.HttpServletRequest"
                 msg="webclient.performance.reports.required">
         <javascript><![CDATA[

	function validateRequiredIf(form) {
	        if(trim(form.rsubmit.value) != "")
        	 {
			if (trim(form.elements[0].value) == "")
			{
				alert(noagentmsg);
				form.elements[0].focus();
				return false;
			}
		}
		return true;
	  }

            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }

            ]]>
         </javascript>
      </validator>
     <validator name="dateRequiredIf"
            classname="com.adventnet.nms.webclient.common.CustomValidationRules"
               method="dateRequiredIf"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
                  msg="webclient.performance.reports.daterequired.message">

        <javascript><![CDATA[
            function dateRequiredIf(form) {
		var period = trim(form.period.value);
		var startDate = trim(form.startDate.value);
		var endDate = trim(form.endDate.value);
		if (period == "custom")
		{	
			if (startDate == "")
			{
			   alert(startDateMessage);
			   return false;
			}
			if (endDate == "")
			{
			   alert(endDateMessage);
			   return false;
			}
		}
		return true;
	    }

            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            ]]>
         </javascript>
      </validator>
    <validator name="validateDateOrder"
            classname="com.adventnet.nms.webclient.common.CustomValidationRules"
               method="validateCustomDateOrder"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
                  msg="webclient.performance.reports.improperdates.message">
        <javascript><![CDATA[
            function validateCustomDateOrder(form) {
                var period = trim(form.period.value);
                var startDate = new Date(trim(form.startDate.value));
                var endDate = new Date(trim(form.endDate.value));
                if (period == "custom")
				{
                    var yyyy, yyyy1;
                    var mm,mm1;
                    var dd,dd1;
                    var hh,hh1;
                    var min,min1;
                    var start = trim(form.startDate.value).split(" ");
                    var d = start[0].split("-");
                    yyyy = d[0];
                    mm = d[1];
                    dd = d[2];
                    var time = start[1].split(":");
                    hh  = time[0];
                    min = time[1];
                    var startDate = new Date(yyyy,mm,dd,hh,min);
                    var end = trim(form.endDate.value).split(" ");
                    var d1 = end[0].split("-");
                    yyyy1 = d1[0];
                    mm1 = d1[1];
                    dd1 = d1[2];
                    var time1 = end[1].split(":");
                    hh1  = time1[0];
                    min1 = time1[1];
                    var endDate = new Date(yyyy1,mm1,dd1,hh1,min1);

                    if (startDate == "")
                    {
                        alert(startDateMessage);
                        return false;
                    }
                    if (endDate == "")
                    {
                        alert(endDateMessage);
                        return false;
                    }
                    var startTime = startDate.getTime();
                    var endTime = endDate.getTime();
                    if (startTime > endTime)
                    {
                        alert(invalidDateMessage);
                        return false;
                    }
                }
                return true;
            }

            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            ]]>
         </javascript>
      </validator>




      <validator name="integer"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateInteger"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="webclient.topo.errors.integer"
       jsFunctionName="IntegerValidations">

         <javascript><![CDATA[
            function validateInteger(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oInteger = new IntegerValidations();
                for (x in oInteger) {
                	var field = form[oInteger[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {
                        
                        var value = '';
						// get field's value
						if (field.type == "select-one") {
							var si = field.selectedIndex;
						    if (si >= 0) {
							    value = field.options[si].value;
						    }
						} else {
							value = field.value;
						}
                        
                        if (value.length > 0) {
                        
                            if (!isAllDigits(value)) {
                                bValid = false;
                                if (i == 0) {
	                                focusField = field;
	                            }
						        fields[i++] = oInteger[x][1];
						        
                            } else {
	                            var iValue = parseInt(value);
	                            if (isNaN(iValue) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
	                                if (i == 0) {
	                                    focusField = field;
	                                }
	                                fields[i++] = oInteger[x][1];
	                                bValid = false;
	                           }
                           }
                       }
                    }
                }
                if (fields.length > 0) {
                   focusField.focus();
                   alert(fields.join('\n'));
                }
                return bValid;
            }

            function isAllDigits(argvalue) {
                argvalue = argvalue.toString();
                var validChars = "0123456789";
                var startFrom = 0;
                if (argvalue.substring(0, 2) == "0x") {
                   validChars = "0123456789abcdefABCDEF";
                   startFrom = 2;
                } else if (argvalue.charAt(0) == "0") {
                   validChars = "01234567";
                   startFrom = 1;
                } else if (argvalue.charAt(0) == "-") {
                    startFrom = 1;
                }
                
                for (var n = startFrom; n < argvalue.length; n++) {
                    if (validChars.indexOf(argvalue.substring(n, n+1)) == -1) return false;
                }
                return true;
            }]]>
         </javascript>

      </validator>

   </global>
</form-validation>
