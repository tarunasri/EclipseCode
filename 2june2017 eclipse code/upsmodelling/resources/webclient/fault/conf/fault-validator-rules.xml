<?xml version="1.0" encoding="ISO-8859-1" ?>

<!-- $Id: fault-validator-rules.xml,v 1.2 2010/10/29 13:47:07 swaminathap Exp $ -->

<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">

<form-validation>

   <global>

      <validator name="required"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateRequired"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
                  msg="webclient.fault.customview.errors.required">

         <javascript><![CDATA[
            function validateRequired(form) {
                var isValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oRequired = new required();
                for (x in oRequired) {
                    var field = form[oRequired[x][0]];
                	
                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'file' ||
                        field.type == 'select-one' ||
                        field.type == 'radio' ||
                        field.type == 'password') {
                        
                        var value = '';
                        // get field's value
                        if (field.type == "select-one") {
                            var si = field.selectedIndex;
                            if (si >= 0) {
                                value = field.options[si].value;
                            }
                        } else {
                            value = field.value;
                        }
                        
                        if (trim(value).length == 0) {
                        
                            if (i == 0) {
                                focusField = field;
                            }
                            fields[i++] = oRequired[x][1];
                            isValid = false;
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return isValid;
            }
            
            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            
            ]]>
         </javascript>

      </validator>


      <validator name="integer"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateInteger"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="webclient.fault.customview.errors.required"
       jsFunctionName="IntegerValidations">

         <javascript><![CDATA[
            function validateInteger(form) {
                var bValid = true;
                var focusField = null;
                var i = 0;
                var fields = new Array();
                oInteger = new IntegerValidations();
                for (x in oInteger) {
                    var field = form[oInteger[x][0]];

                    if (field.type == 'text' ||
                        field.type == 'textarea' ||
                        field.type == 'select-one' ||
                        field.type == 'radio') {
                        
                        var value;
                        // get field's value
                        if (field.type == "select-one") {
                            var si = field.selectedIndex;
                            value = field.options[si].value;
                        } else {
                            value = field.value;
                        }
                        
                        if (value.length > 0) {
                        
                            var iValue = parseInt(value);
                            if (isNaN(value) || !(iValue >= -2147483648 && iValue <= 2147483647)) {
                                if (i == 0) {
                                    focusField = field;
                                }
                                fields[i++] = oInteger[x][1];
                                bValid = false;
                            }
                        }
                    }
                }
                if (fields.length > 0) {
                    focusField.focus();
                    alert(fields.join('\n'));
                }
                return bValid;
            }]]>
         </javascript>

      </validator>

    <validator name="validateDateOrder"
            classname="com.adventnet.nms.webclient.common.CustomValidationRules"
               method="validateDateOrder"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionErrors,
                       javax.servlet.http.HttpServletRequest"
                  msg="webclient.fault.customview.time.required">
        <javascript><![CDATA[
            function validateDateOrder(form) {
                var name = form.name;
                if(name == "EventCVForm")
                {
                    var start = trim(form.fromTime.value);
                    var end = trim(form.toTime.value);
                    
                    if(start != "" && end != "")
                    {
                        var startDate = new Date(start);
                        var endDate = new Date(end);
                        var startTime = startDate.getTime();
                        var endTime = endDate.getTime();
                        if (startTime > endTime)
                        {
                            alert(invalidDateMessage);
                            return false;
                        }
                        return true;
                    }
                }
                else
                {

                    var createdFrom = trim(form.createdfrom.value);
                    var createdTo = trim(form.createdto.value);
                    var modifiedFrom = trim(form.modifiedfrom.value);
                    var modifiedTo = trim(form.modifiedto.value);
                    
                    if(createdFrom != "" && createdTo != "")
                    {
                        var startDate = new Date(createdFrom);
                        var endDate = new Date(createdTo);
                        var startTime = startDate.getTime();
                        var endTime = endDate.getTime();
                        if (startTime > endTime)
                        {
                            alert(invalidCreateDateMessage);
                            return false;
                        }
                    }


                    if(modifiedFrom != "" && modifiedTo != "")
                    {
                        var startDate = new Date(modifiedFrom);
                        var endDate = new Date(modifiedTo);
                        var startTime = startDate.getTime();
                        var endTime = endDate.getTime();
                        if (startTime > endTime)
                        {
                            alert(invalidModifiedDateMessage);
                            return false;
                        }
                        return true;
                    }
                    return true;    
                }
                
            }

            // Trim whitespace from left and right sides of s.
            function trim(s) {
                return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
            }
            ]]>
         </javascript>
      </validator>

   </global>

</form-validation>
